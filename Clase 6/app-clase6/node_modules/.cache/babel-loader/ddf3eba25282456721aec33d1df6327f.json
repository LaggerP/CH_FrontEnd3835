{"ast":null,"code":"import _objectSpread from \"/Users/pablolagger/Desktop/DesarrolloFE_3835/CH_FrontEnd3835/Clase 6/app-clase6/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { createStore } from 'redux';\nimport axios from 'axios';\nvar initialState = {\n  posts: []\n};\n\nvar rootReducer = function rootReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case 'DELETE_ALL_POSTS':\n      state.posts = [];\n      break;\n\n    case 'PIN_POSTS':\n      state.posts = state.posts.map(function (post) {\n        if (post.id === action.postId) {\n          return _objectSpread({}, post, action.pinPost);\n        }\n\n        return post;\n      });\n      break;\n\n    case 'FAVORITE_POSTS':\n      state.posts = state.posts.map(function (post) {\n        if (post.id === action.postId) {\n          return _objectSpread({}, post, action.comment);\n        }\n\n        return post;\n      });\n      break;\n\n    case 'SHARE_POSTS':\n      break;\n\n    case 'COMMENT_POST':\n      state.posts = state.posts.map(function (post) {\n        if (post.id === action.postId) {\n          return _objectSpread({}, post, action.comment);\n        }\n\n        return post;\n      });\n      break;\n\n    case 'LIKE_POST':\n      state.posts = state.posts.map(function (post) {\n        if (post.id === action.postId) {\n          return post.likes++;\n        }\n\n        return post;\n      });\n      break;\n\n    case 'DISLIKE_POST':\n      state.posts = state.posts.map(function (post) {\n        if (post.id === action.postId) {\n          return post.likes--;\n        }\n\n        return post;\n      });\n      break;\n\n    case 'GET_POSTS':\n      axios.get(state.post).then(function (response) {\n        console.log(response.data);\n      }).catch(function (error) {\n        console.log(error);\n      });\n      break;\n\n    case 'ADD_POSTS':\n      state.posts = state.posts.concat(action.post);\n      break;\n\n    case 'UPDATE_POST':\n      state.posts = state.posts.map(function (post) {\n        if (post.id === action.postId) {\n          return _objectSpread({}, post, action.post);\n        }\n\n        return post;\n      });\n      break;\n\n    case 'FIND_POST':\n      state.posts = state.posts.map(function (post) {\n        if (post.id === action.postId) {\n          return post;\n        }\n\n        return post;\n      });\n      break;\n\n    case 'DELETE_POST':\n      state.posts = state.posts.map(function (post) {\n        if (post.id === action.postId) {\n          post = [];\n        }\n\n        return post;\n      });\n      break;\n\n    default:\n      return state;\n  }\n\n  return state;\n};\n\nvar store = createStore(rootReducer);\nexport default store;","map":{"version":3,"sources":["/Users/pablolagger/Desktop/DesarrolloFE_3835/CH_FrontEnd3835/Clase 6/app-clase6/src/store.js"],"names":["createStore","axios","initialState","posts","rootReducer","state","action","type","map","post","id","postId","pinPost","comment","likes","get","then","response","console","log","data","catch","error","concat","store"],"mappings":"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","sourcesContent":["import {createStore} from 'redux';\nimport axios from 'axios';\n\nconst initialState = {\n    posts: [],\n}\n\nconst rootReducer = function(state=initialState, action){\n    switch(action.type){\n        case 'DELETE_ALL_POSTS':\n            state.posts = [];\n            break;\n\n        case 'PIN_POSTS':\n            state.posts = state.posts.map(post => {\n                if (post.id === action.postId) {\n                    return { ...post, ...action.pinPost}\n                }\n                return post\n            })\n            break;\n\n        case 'FAVORITE_POSTS':\n             state.posts = state.posts.map(post => {\n                 if (post.id === action.postId) {\n                     return { ...post,\n                         ...action.comment\n                     }\n                 }\n                 return post\n             })\n             break;\n\n        case 'SHARE_POSTS':\n            \n            break;\n\n        case 'COMMENT_POST':\n            state.posts = state.posts.map(post => {\n                if (post.id === action.postId) {\n                    return { ...post, ...action.comment}\n                }\n                return post\n            })\n            break;\n\n        case 'LIKE_POST':\n            state.posts = state.posts.map(post => {\n                if (post.id === action.postId) {\n                    return post.likes++\n                }\n                return post\n            })\n            break;\n        \n        case 'DISLIKE_POST':\n            state.posts = state.posts.map(post => {\n                if (post.id === action.postId) {\n                    return post.likes--\n                }\n                return post\n            })\n            break;\n\n        case 'GET_POSTS':\n            axios.get(state.post)\n                .then(function (response) {\n                    console.log(response.data);\n                })\n                .catch(function (error) {\n                    console.log(error);\n                });\n            break;\n\n        case 'ADD_POSTS':\n            state.posts = state.posts.concat(action.post)\n            break;\n\n        case 'UPDATE_POST':\n            state.posts = state.posts.map(post => {\n                if (post.id === action.postId) {\n                    return {...post, ...action.post}\n                }\n                return post\n            })\n            break;\n\n        case 'FIND_POST':\n            state.posts = state.posts.map(post => {\n                if (post.id === action.postId) {\n                    return post\n                }\n                return post\n            })\n            break;\n\n        case 'DELETE_POST':\n            state.posts = state.posts.map(post => {\n                if (post.id === action.postId) {\n                    post = []\n                }\n                return post;\n            })\n            break;\n         default: return state;\n    }    \n    return state;\n}\nconst store = createStore(rootReducer);\n\n\nexport default store;"]},"metadata":{},"sourceType":"module"}